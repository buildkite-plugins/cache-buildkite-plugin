#!/bin/bash
set -euo pipefail

CACHE_FOLDER="${BUILDKITE_PLUGIN_FS_CACHE_FOLDER:-/var/cache/buildkite}"

if ! [ -d "${CACHE_FOLDER}" ]; then
  echo "Cache folder ${CACHE_FOLDER} does not exist"
  echo 'Is the BUILDKITE_PLUGIN_FS_CACHE_FOLDER variable setup correctly?'
  exit 1
fi

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/lock.bash
. "${DIR}/../lib/lock.bash"

restore_cache() {
  local from="${CACHE_FOLDER}/$1"
  local to="$2"
  local fs_copy_tool="$3"

  wait_and_lock "${from}"
  # shellcheck disable=2064  # actually want variable interpolated here
  trap "release_lock_folder '${from}'" SIGINT SIGTERM SIGQUIT

  if [ -d "$from" ]; then
    if [ "$fs_copy_tool" = "rsync" ]; then
      rsync -a --delete "${from}/." "$to" # copy as folder
    else
      cp -a "${from}/." "$to" # copy as folder
    fi
  else
    if [ "$fs_copy_tool" = "rsync" ]; then
      rsync -a --delete "$from" "$to"
    else
      cp -a "$from" "$to"
    fi
  fi

  release_lock "${from}"
}

save_cache() {
  local to="${CACHE_FOLDER}/$1"
  local from="$2"

  wait_and_lock "${to}"
  # shellcheck disable=2064  # actually want variable interpolated here
  trap "release_lock '${to}'" SIGINT SIGTERM SIGQUIT

  if [ -n "$1" ] && [ -e "$to" ]; then
    rm -rf "$to"
  fi
  cp -a "$from" "$to"

  release_lock "${to}"
}

exists_cache() {
  local from="${CACHE_FOLDER}/$1"
  [ -n "$1" ] && [ -e "${from}" ]
}

OPCODE="$1"
shift

if [ "$OPCODE" = 'exists' ]; then
  exists_cache "$@"
elif [ "$OPCODE" = 'get' ]; then
  restore_cache "$@"
elif [ "$OPCODE" = 'save' ]; then
  save_cache "$@"
else
  exit 255
fi
