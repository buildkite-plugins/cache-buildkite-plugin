#!/bin/bash
set -euo pipefail

# skip caching if command exited non-zero
if [ "${BUILDKITE_COMMAND_EXIT_STATUS}" -ne 0 ] ; then
  echo "Aborting cache post-command hook because command exited with status $BUILDKITE_COMMAND_EXIT_STATUS"
  exit 0
fi

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "${DIR}/../lib/shared.bash"
# shellcheck source=lib/compression.bash
. "${DIR}/../lib/compression.bash"

CACHE_PATH=$(plugin_read_config PATH)

if [ -z "${CACHE_PATH}" ] ; then
  echo "+++ ðŸš¨ Missing path option in the cache plugin to save"
  exit 1
fi

COMPRESS=$(plugin_read_config COMPRESSION 'none')
if ! validate_compression "${COMPRESS}"; then
  echo "+++ ðŸš¨ Invalid value for compression option"
  exit 1
fi

SAVE_LEVELS=()
if plugin_read_list_into_result SAVE; then
  for LEVEL in "${result[@]}"; do
    SAVE_LEVELS+=("${LEVEL}")

    # this validates the level as well
    KEY=$(build_key "${LEVEL}" "${CACHE_PATH}" "${COMPRESS}")

    if [ "${LEVEL}" = 'file' ] && [ -z "$(plugin_read_config MANIFEST)" ]; then
      echo "+++ ðŸš¨ Missing manifest option in the cache plugin for file-level saving"
      exit 1
    fi
  done
else
  echo 'Cache not setup for saving'
  exit 0
fi

ACTUAL_PATH="${CACHE_PATH}"
already_compressed='false'
needs_compression() {
  compression_active && [ "$already_compressed" = 'false' ]
}
do_compress() {
  ACTUAL_PATH=$(mktemp)
  compress "${CACHE_PATH}" "${ACTUAL_PATH}"
  already_compressed='true'
}

for LEVEL in "${SAVE_LEVELS[@]}"; do
  KEY=$(build_key "${LEVEL}" "${CACHE_PATH}" "${COMPRESS}")

  if [ "$(plugin_read_config FORCE 'false')" != 'false' ] ||
     ! backend_exec exists "${KEY}"; then
    echo "Saving ${LEVEL}-level cache of ${CACHE_PATH}"
    if needs_compression; then
      do_compress
    fi
    backend_exec save "${KEY}" "${ACTUAL_PATH}"
  else
    echo "Cache of ${LEVEL} already exists, skipping"
  fi
done
