#!/bin/bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/shared.bash
. "${DIR}/../lib/shared.bash"
# shellcheck source=lib/compression.bash
. "${DIR}/../lib/compression.bash"

CACHE_PATH=$(plugin_read_config PATH)

if [ -z "${CACHE_PATH}" ] ; then
  echo "+++ ðŸš¨ Missing path option in the cache plugin to save"
  exit 1
fi

COMPRESS=$(plugin_read_config COMPRESSION 'none')
if ! validate_compression "${COMPRESS}"; then
  echo "+++ ðŸš¨ Invalid value for compression option"
  exit 1
fi

SAVE_LEVELS=()
if plugin_read_list_into_result SAVE; then
  for LEVEL in "${result[@]}"; do
    SAVE_LEVELS+=("${LEVEL}")

    # this validates the level as well
    KEY=$(build_key "${LEVEL}" "${CACHE_PATH}" "${COMPRESS}")

    if [ "${LEVEL}" = 'file' ] && [ -z "$(plugin_read_config MANIFEST)" ]; then
      echo "+++ ðŸš¨ Missing manifest option in the cache plugin for file-level saving"
      exit 1
    fi
  done
else
  echo 'Cache not setup for saving'
  exit 0
fi

HAS_TRIED_COMPRESSION=0

for LEVEL in "${SAVE_LEVELS[@]}"; do
  KEY=$(build_key "${LEVEL}" "${CACHE_PATH}" "${COMPRESS}")

  if [ "$(plugin_read_config FORCE 'false')" != 'false' ] ||
     ! backend_exec exists "${KEY}"; then

    if [ "${HAS_TRIED_COMPRESSION}" -eq 0 ]; then
      HAS_TRIED_COMPRESSION=1

      if compression_active; then
        ACTUAL_PATH=$(mktemp)
        compress "${CACHE_PATH}" "${ACTUAL_PATH}"
      else
        ACTUAL_PATH="${CACHE_PATH}"
      fi
    fi
    
    echo "Saving ${LEVEL}-level cache of ${CACHE_PATH}"
    backend_exec save "${KEY}" "${ACTUAL_PATH}"
  else
    echo "Cache of ${LEVEL} already exists, skipping"
  fi
done
